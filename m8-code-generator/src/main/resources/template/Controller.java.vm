package ${package}.${moduleName}.controller;

import java.util.Arrays;
import java.util.Map;
import java.util.List;
import java.util.Date;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.ccssoft.m8.common.web.BaseController;
import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.entity.queryEntity.PagedQuery${className}Entity;
import ${package}.${moduleName}.service.${className}Service;
import com.ccssoft.m8.common.ccssoft.modules.util.PageUtils;
import com.ccssoft.m8.common.ccssoft.modules.util.ReturnEntity;
import com.ccssoft.m8.common.ccssoft.modules.util.QueryEntityTools;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import springfox.documentation.annotations.ApiIgnore;

import lombok.extern.slf4j.Slf4j;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Api(value = "${comments}",description="${comments}")
@RestController
@RequestMapping("/${pathName}")
public class ${className}Controller extends BaseController{
    @Autowired
    private ${className}Service<${className}Entity> ${classname}Service;
    
    private static final String OBJECT_CODE = "m8_${tableName}";

    /**
     * 列表
     */
    @ApiOperation("${comments}列表")
    @GetMapping("")
    @ApiImplicitParams({ @ApiImplicitParam(paramType = "query", dataType = "PagedQuery${className}Entity", name = "${classname}", value = "${comments}", required = false) })
    public ReturnEntity<PageUtils<${className}Entity>> list(PagedQuery${className}Entity ${classname}){
    	Map<String, Object> params = QueryEntityTools.beanToMap(${classname});
		PageUtils<${className}Entity> page = ${classname}Service.queryPage(params);
        return new ReturnEntity<PageUtils<${className}Entity>>().ok(page);
    }
    
    /**
     * 列表(不分页)
     */
    @ApiOperation("${comments}列表(不分页)")
    @GetMapping("/nopage")
    @ApiImplicitParams({ @ApiImplicitParam(paramType = "query", dataType = "${className}Entity", name = "${classname}", value = "${comments}对象", required = false) })
    public ReturnEntity<List<${className}Entity>> list(${className}Entity ${classname}){
    	Map<String, Object> columnMap = QueryEntityTools.beanToColumnMap(${classname});
		List<${className}Entity> page = ${classname}Service.selectByMap(columnMap);
        return new ReturnEntity<List<${className}Entity>>().ok(page);
    }

    /**
     * 信息
     */
    @ApiOperation("${comments}信息")
    @GetMapping("/{id}")
    @ApiImplicitParams({ @ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "${comments}ID", required = true) })
    public ReturnEntity<${className}Entity> info(@PathVariable("id") String id){
    	${className}Entity ${classname} = ${classname}Service.selectById(id);
		return new ReturnEntity<${className}Entity>().ok(${classname});
    }

     /**
     * 创建
     */
    @ApiOperation("${comments}创建")
    @PostMapping("")
    @ApiImplicitParams({ @ApiImplicitParam(paramType = "body", dataType = "${className}Entity", name = "${classname}", value = "${comments}", required = true) })
    public ReturnEntity<${className}Entity> save(@RequestBody ${className}Entity ${classname}){
#if(${haveID})
        ${classname}.setId(getUUIDPrimaryKey());
#end
        verifications(QueryEntityTools.beanToMap(${classname}), OBJECT_CODE);
        ${classname}Service.insert(${classname});
        return new ReturnEntity<${className}Entity>().ok(${classname});
    }

     /**
     * 修改
     */
    @ApiOperation("修改${comments}")
    @PutMapping("/{id}")
    @ApiImplicitParams({ @ApiImplicitParam(paramType = "body", dataType = "${className}Entity", name = "${classname}", value = "${comments}", required = true),
            @ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "${comments}ID", required = true) })
    public ReturnEntity<${className}Entity> update(@PathVariable("id") String id,@RequestBody ${className}Entity ${classname}){
        if(StringUtils.isEmpty(id)) return new ReturnEntity<${className}Entity>().error("${comments}ID不能为空");
#if(${haveID})
    if (!id.equals(${classname}.getId()))
        return new ReturnEntity<${className}Entity>().error("${comments}ID不匹配");
    			verifications(QueryEntityTools.beanToMap(${classname}), OBJECT_CODE);
    ${classname}.setUpdateTime(new Date());
    ${classname}Service.updateById(${classname});
    return new ReturnEntity<${className}Entity>().ok(${classname});
#end
#if(!${haveID})
    verifications(QueryEntityTools.beanToMap(${classname}), OBJECT_CODE);
	${classname}Service.updateById(${classname});
	return new ReturnEntity<${className}Entity>().ok(${classname});
#end
    }
    /**
     * 批量删除
     */
    @ApiOperation("批量删除")
    @DeleteMapping("/all/batch")
    @ApiIgnore
    public ReturnEntity batchDelete(@RequestBody String[] ids){
        if(ids != null && ids.length != 0){
            ${classname}Service.deleteBatchIds(Arrays.asList(ids));
            return new ReturnEntity().ok();
        } else {
            return new ReturnEntity().errorLogic("ID为空:"+ids);
        }
    }

   /**
	 * 删除
	 */
	@ApiOperation("删除${comments}")
	@DeleteMapping("/{id}")
    @ApiImplicitParams({ @ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "${comments}ID", required = true) })
    public ReturnEntity delete(@PathVariable("id") String id){
		${classname}Service.deleteById(id);
		return new ReturnEntity().ok();
    }

}
